import random
import uuid

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from sqlalchemy.ext.asyncio import AsyncSession

from app.Objects.BranchRoleModel import BranchRole
from app.Objects.UserModel import User
from app.Services.BotManagerService.Templates.Markup import Markup
from app.Services.BotManagerService.Templates.Text import Text
from app.Services.ModelServices.BranchRoleServices import get_role_by_id
from app.Services.ModelServices.UserService import (
    get_user_by_telegram_id,
    get_user_roles,
)


# –°–ø–∏—Å–æ–∫ —ç–º–æ–¥–∑–∏ –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
emojis = ["‚úåÔ∏è", "‚úã", "ü§ù", "üëã", "üôå"]

# –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
photo_url = "https://lumeriq.b-cdn.net/public-osvitech/start_menu_image.jpeg"
file_id = None  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è file_id


# ----- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏—è -----
async def action(session: AsyncSession,
                 message: Message,
                 state: FSMContext,
                 user: User,
                 role: BranchRole,
                 branch_id: uuid.UUID):

    hi_emoji = random.choice(emojis)
    if user.branch_id == branch_id and role.branch_id == branch_id and role in user.roles:
        if role.name == "–í—á–∏—Ç–µ–ª—å":
            # TODO —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–∞–ª—å—à–µ
            msg = await message.answer_photo(
                photo=photo_url,
                caption=await Text.start_success_teacher(hi_emoji, user.name),
                parse_mode="html",
                reply_markup=await Markup.start_menu()
            )
        elif role.name == "–ö—É—Ä–∞—Ç–æ—Ä":
            #TODO —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫—É—Ä–∞—Ç–æ—Ä—Å–∫–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª (–±—É–¥—É—â–µ–µ)
            msg = await message.answer("–¢—É—Ç –±—É–¥–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∫—É—Ä–∞—Ç–æ—Ä–∞")
    # –∑–¥–µ—Å—å –º–æ–∂–µ—à—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ª–æ–≥–∏–∫—É –Ω—É–∂–Ω–æ–π —Ä–æ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º–µ–Ω—é –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫)
    # ...

def create_router_start() -> Router:
    router = Router()
    @router.message(F.text == "/start", F.chat.type == "private")
    async def start_handler(
            message: Message,
            state: FSMContext,
            config: dict,  # <-- –ù–∞—à –∫–æ–Ω—Ñ–∏–≥ (–≤ –Ω–µ–º 'school_id' –∏ 'welcome_message')
            db: AsyncSession
    ):
        user_id = message.from_user.id
        hi_emoji = random.choice(emojis)

        await state.clear()

        branch_id = uuid.UUID(config.get("school_id"))

        user = await get_user_by_telegram_id(db, telegram_id=user_id)

        if user is None or user.branch_id != branch_id:
            await message.answer("‚ùå –í–∏ –Ω–µ –º–∞—î—Ç–µ –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—å–æ–≥–æ –±–æ—Ç—É.")
            return

        roles = await get_user_roles(db, user_id=user.id)

        # –ï—Å–ª–∏ —Ä–æ–ª–µ–π –Ω–µ—Ç
        if not roles:
            await message.answer("‚ö†Ô∏è –£ –≤–∞—Å —â–µ –Ω–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ —Ä–æ–ª–µ–π.")
            return

        if len(roles) == 1:
            await state.update_data(role_id=roles[0].id, user_id=user.id)
            await action(db, message, state, user, roles[0], branch_id)
            return
        await state.update_data(branch_id=branch_id, user_id=user.id)
        await message.answer(
            text=f"{hi_emoji} –û–±–µ—Ä—ñ—Ç—å —Ä–æ–ª—å, –ø—ñ–¥ —è–∫–æ—é –≤–∏ —Ö–æ—á–µ—Ç–µ —É–≤—ñ–π—Ç–∏:",
            reply_markup=await Markup.select_role(user, roles)
        )


    @router.callback_query(lambda c: c.data.startswith("select_role:"))
    async def select_role_callback(callback: CallbackQuery, state: FSMContext, db: AsyncSession):
        callback_data = callback.data.split(":")
        role_id = uuid.UUID(callback_data[1])
        telegram_id = callback.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –∏–∑ –ë–î (–µ—Å–ª–∏ —Ö–æ—á–µ—à—å –∏–º—è)
        role = await get_role_by_id(db, role_id)
        user = await get_user_by_telegram_id(db, telegram_id, with_roles=True)
        branch_id = user.branch_id

        await state.update_data(role_name=role.name, role_id=str(role.id))

        await callback.message.edit_text(
            text=f"‚úÖ –í–∏ —É–≤—ñ–π—à–ª–∏ —è–∫ <b>{role.name}</b>",
            parse_mode="HTML",
            reply_markup=None
        )

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
        await action(db, callback.message, state, user, role, branch_id)

    return router