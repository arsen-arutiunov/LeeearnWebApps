from aiogram.types import InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from app.Objects.BranchRoleModel import BranchRole
from app.Objects.UserModel import User


class Markup:
    @staticmethod
    def from_template(buttons_template: list[list[str]], row_width: int = 1) -> InlineKeyboardMarkup:
        """
        –°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–µ—Ä–µ–¥–∞–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω—É –∫–Ω–æ–ø–æ–∫.

        :param buttons_template: –°–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ —É —Ñ–æ—Ä–º–∞—Ç—ñ [[text, callback_data], ...].
        :param row_width: –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–Ω–æ–ø–æ–∫ –≤ –æ–¥–Ω–æ–º—É —Ä—è–¥–∫—É.
        :return: InlineKeyboardMarkup
        """
        kb = InlineKeyboardBuilder()

        for button in buttons_template:
            if len(button) == 2:  # –û—á—ñ–∫—É—î–º–æ —Ñ–æ—Ä–º–∞—Ç ["text", "callback_data"]
                if "https" in button[1]:
                    kb.button(text=button[0], url=button[1])
                else:
                    kb.button(text=button[0], callback_data=button[1])

        kb.adjust(row_width)  # –†–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ –ø–æ —Ä—è–¥–∫–∞—Ö

        return kb.as_markup()

    @staticmethod
    async def select_role(user: User, roles: list[BranchRole]):
        buttons = []
        for role in roles:
            buttons.append([role.name, f"select_role:{role.id}"])
        return Markup.from_template(buttons, row_width=1)


    @staticmethod
    async def teacher_menu():
        buttons = [
            ["–ú—ñ–π —Ä–æ–∑–∫–ª–∞–¥ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ", "start_schedule"],
            ["–ö–µ—Ä—É–≤–∞–Ω–Ω—è —É—Ä–æ–∫–∞–º–∏", "start_lessons"],
            # ["–ü–æ–¥–∏–≤–∏—Ç–∏—Å—è —Å–≤—ñ–π —Ä–µ–π—Ç–∏–Ω–≥", "my_rating"],
            ["–ó–∞–≥–∞–ª—å–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞", "start_help"],
            # ["–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", "start_settings"],
            ["–ó–º—ñ–Ω–∏—Ç–∏ —Ä–æ–ª—å ‚Ü©Ô∏è", "back_to_select_role"]
        ]
        return Markup.from_template(buttons, row_width=1)

    @staticmethod
    async def start_help(supervisor_url, branch):
        buttons = [
            # ["–ú—ñ–π —Ä–µ–π—Ç–∏–Ω–≥", "rating"],
            # ["–í–∑—è—Ç–∏ –≤–∏—Ö—ñ–¥–Ω–∏–π", "dayoff"],
            ["–ë—É–¥–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ç–≥",
             "https://t.me/example"],
            ["–ë—É–¥–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å–∞–π—Ç",
             f"https://example.com"],
            ["–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å ‚Ü©Ô∏è", "start"]
        ]
        return Markup.from_template(buttons, row_width=2)

    @staticmethod
    async def curators_menu():
        buttons = [
            ["–ó–º—ñ–Ω–∏—Ç–∏ —Ä–æ–ª—å ‚Ü©Ô∏è", "back_to_select_role"]
        ]
        return Markup.from_template(buttons, row_width=1)

    @staticmethod
    async def lessons_menu():
        buttons = [
            ["–ù–µ–º–∞—î —É—á–Ω—è –Ω–∞ —É—Ä–æ—Ü—ñ", "lesson_nopupil"],
            ["–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –ø–ª–∞–Ω–æ–≤–∏–π —É—Ä–æ–∫", "lesson_move_accept"],
            ["–ó—Ä–æ–±–∏—Ç–∏ –∑–≤—ñ—Ç –∑–∞ —É—Ä–æ–∫", "lesson_report"],
            ["–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å ‚Ü©Ô∏è", "start"]
        ]
        return Markup.from_template(buttons, row_width=2)

    @staticmethod
    async def schedule_menu():
        buttons = [
            ["üìÖ –°—å–æ–≥–æ–¥–Ω—ñ", "start_schedule"],
            ["üìÜ –ó–∞–≤—Ç—Ä–∞", "start_schedule_tomorrow"],
            ["üîÅ –û–Ω–æ–≤–∏—Ç–∏", "start_schedule"],
            ["–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å ‚Ü©Ô∏è", "start"]
        ]
        return Markup.from_template(buttons, row_width=2)

    @staticmethod
    async def move_lesson_acceptation():
        buttons = [
            ["–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏", "lesson_move"],
            ["–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å ‚Ü©Ô∏è", "start_lessons"]
        ]
        return Markup.from_template(buttons, row_width=2)
