class Text:
    @staticmethod
    def _format_template(template: str, args: tuple) -> str:
        """
        –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—ñ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–Ω–∞—á–µ–Ω—å —É —à–∞–±–ª–æ–Ω.

        :param template: –¢–µ–∫—Å—Ç —ñ–∑ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞–º–∏.
        :param args: –ê—Ä–≥—É–º–µ–Ω—Ç–∏ –¥–ª—è –ø—ñ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ —É —à–∞–±–ª–æ–Ω.
        :return: –í—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–π —Ç–µ–∫—Å—Ç.
        """
        import re

        def get_value(index: int):
            try:
                return str(args[index])
            except IndexError:
                raise ValueError(f"–ó–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞ <{index}> –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö.")

        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∏ <0>, <1>, ...
        pattern = r"<(\d+)>"
        placeholders = re.findall(pattern, template)

        # –ó–∞–º—ñ–Ω—é—î–º–æ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∏
        for placeholder in placeholders:
            index = int(placeholder)
            value = get_value(index)
            template = template.replace(f"<{placeholder}>", value)

        return template

    @staticmethod
    async def start_success_teacher(*args):
        template = "–ü—Ä–∏–≤—ñ—Ç <0> –¢–∏ —É–≤—ñ–π—à–æ–≤ —è–∫ <b><1></b>.\n\n–Ø —Ç–≤—ñ–π –æ—Å–æ–±–∏—Å—Ç–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ –≤—á–∏—Ç–µ–ª—è. –ß–∏–º –±—É–¥—É –∫–æ—Ä–∏—Å–Ω–∏–π?"
        return Text._format_template(template, args)

    @staticmethod
    async def start_error_notfound(*args):
        template = "‚ùå –í–∏ –Ω–µ –º–∞—î—Ç–µ –¥–æ—Å—Ç—É–ø—É –¥–æ –±–æ—Ç—É."
        return Text._format_template(template, args)

    @staticmethod
    async def start_help(*args):
        template = "–¢—É—Ç –±—É–¥—É—Ç—å —Ä—ñ–∑–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è."
        return Text._format_template(template, args)

    @staticmethod
    async def lessons(*args):
        template = "–¢—É—Ç –∑—ñ–±—Ä–∞–ª–∏ –Ω–∞–π—á–∞—Å—Ç—ñ—à—ñ –∑–∞–ø–∏—Ç–∏ –¥–æ –±—É–¥—å —è–∫–∏—Ö –≤—ñ–¥–¥—ñ–ª—ñ–≤."
        return Text._format_template(template, args)

    @staticmethod
    async def schedule_waiting(*args):
        template = f"üîÑÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—É..."
        return Text._format_template(template, args)

    @staticmethod
    async def schedule(*args):
        template = "<3> <b><0></b>\n\n<1>\n\n<2>"
        return Text._format_template(template, args)
