import asyncio
import logging
from typing import Dict, Any

from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties

from app.Infrastructure.Database import async_session
from .Handlers import register_handlers
from .Middleware import DbSessionMiddleware


class BotManager:
    def __init__(self):
        """
        –•—Ä–∞–Ω–∏–º —Å–ª–æ–≤–∞—Ä—å —Å –∑–∞–ø—É—â–µ–Ω–Ω—ã–º–∏ –±–æ—Ç–∞–º–∏.
        –ö–ª—é—á - school_id, –∑–Ω–∞—á–µ–Ω–∏–µ - dict —Å task, dispatcher, bot –∏ stop_event.
        """
        self.running_bots: Dict[str, Dict[str, Any]] = {}
        logging.info("ü§ñ BotManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

    async def _run_bot_polling(self, dp: Dispatcher, bot: Bot, config: dict,
                               stop_event: asyncio.Event):
        """
        –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª–ª–∏–Ω–≥–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.
        """
        school_id = config.get("school_id")
        bot_name = config.get("bot_name", f"Bot {school_id}")

        # –ü–µ—Ä–µ–¥–∞–µ–º –ø—É–ª —Å–µ—Å—Å–∏–π –ë–î –≤ middleware
        dp.update.middleware(DbSessionMiddleware(session_pool=async_session))

        logging.info(
            f"üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–ª–∏–Ω–≥–∞ –¥–ª—è –±–æ—Ç–∞: {bot_name} (school_id: {school_id})")

        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π stop_event
            await dp.start_polling(
                bot,
                allowed_updates=dp.resolve_used_update_types(),
                config=config,
                handle_signals=False
                # –í–∞–∂–Ω–æ! –ù–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
            )
        except asyncio.CancelledError:
            logging.info(f"üõë –ü–æ–ª–ª–∏–Ω–≥ –æ—Ç–º–µ–Ω–µ–Ω –¥–ª—è: {bot_name}")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –ø–æ–ª–ª–∏–Ω–≥–∞ {bot_name}: {e}",
                          exc_info=True)
        finally:
            logging.info(f"‚úÖ –ü–æ–ª–ª–∏–Ω–≥-—Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è: {bot_name}")

    async def start_bot(self, config: dict):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞.
        """
        school_id = str(config["school_id"])
        token = config.get("bot_token")

        if not token:
            logging.warning(
                f"‚ö†Ô∏è –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –¥–ª—è school_id: {school_id}. –ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω.")
            return {"status": "no_token", "school_id": school_id}

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –£–ñ–ï –ù–ï –ó–ê–ü–£–©–ï–ù
        if school_id in self.running_bots:
            bot_data = self.running_bots[school_id]
            if not bot_data["task"].done():
                logging.info(f"‚ÑπÔ∏è –ë–æ—Ç –¥–ª—è {school_id} —É–∂–µ –∑–∞–ø—É—â–µ–Ω.")
                return {"status": "already_running", "school_id": school_id}

        logging.info(f"üîß –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –¥–ª—è school_id: {school_id}")

        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã
        bot = Bot(
            token=token,
            default=DefaultBotProperties(parse_mode=ParseMode.HTML)
        )
        dp = Dispatcher()
        stop_event = asyncio.Event()

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö—ç–Ω–¥–ª–µ—Ä—ã
        register_handlers(dp)

        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
        task = asyncio.create_task(
            self._run_bot_polling(dp, bot, config, stop_event)
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –í–°–ï –æ–±—ä–µ–∫—Ç—ã
        self.running_bots[school_id] = {
            "task": task,
            "dispatcher": dp,
            "bot": bot,
            "stop_event": stop_event,
            "config": config  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ bot_name –∏ —Ç.–¥.
        }

        logging.info(f"‚úÖ –ë–æ—Ç –¥–ª—è {school_id} –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        return {"status": "started", "school_id": school_id}

    async def stop_bot(self, school_id: str):
        """
        –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—é—â–∏–π –±–æ—Ç.
        """
        school_id = str(school_id)
        bot_instance = self.running_bots.get(school_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —á—Ç–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å
        if not bot_instance:
            logging.info(
                f"‚ÑπÔ∏è –ë–æ—Ç –¥–ª—è {school_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö.")
            return {"status": "not_found", "school_id": school_id}

        task: asyncio.Task = bot_instance["task"]

        if task.done():
            logging.info(f"‚ÑπÔ∏è –ë–æ—Ç –¥–ª—è {school_id} —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            # –û—á–∏—â–∞–µ–º –∏–∑ —Å–ª–æ–≤–∞—Ä—è
            del self.running_bots[school_id]
            return {"status": "already_stopped", "school_id": school_id}

        logging.info(f"üõë –ù–∞—á–∏–Ω–∞–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É –±–æ—Ç–∞ –¥–ª—è {school_id}...")

        dispatcher: Dispatcher = bot_instance["dispatcher"]
        bot: Bot = bot_instance["bot"]
        stop_event: asyncio.Event = bot_instance["stop_event"]

        try:
            # 1. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            stop_event.set()

            # 2. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä (–ø—Ä–µ–∫—Ä–∞—â–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–æ–≤—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π)
            await dispatcher.stop_polling()

            logging.info(
                f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –ø–æ–ª–ª–∏–Ω–≥–∞ –¥–ª—è {school_id}...")

            # 3. –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            await asyncio.wait_for(task, timeout=10.0)

            logging.info(f"‚úÖ –ó–∞–¥–∞—á–∞ –ø–æ–ª–ª–∏–Ω–≥–∞ –¥–ª—è {school_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

        except asyncio.TimeoutError:
            logging.warning(
                f"‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–ª—è {school_id}. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–º–µ–Ω–∞...")
            task.cancel()
            try:
                await task
            except asyncio.CancelledError:
                logging.info(
                    f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–ª—è {school_id} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞")

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞ {school_id}: {e}",
                          exc_info=True)
            task.cancel()
            try:
                await task
            except asyncio.CancelledError:
                pass

        finally:
            # 4. –ó–∞–∫—Ä—ã–≤–∞–µ–º HTTP-—Å–µ—Å—Å–∏—é –±–æ—Ç–∞
            try:
                await bot.session.close()
                logging.info(f"‚úÖ HTTP —Å–µ—Å—Å–∏—è –¥–ª—è {school_id} –∑–∞–∫—Ä—ã—Ç–∞")
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Å—Å–∏–∏ {school_id}: {e}")

            # 5. –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö
            if school_id in self.running_bots:
                del self.running_bots[school_id]
                logging.info(f"‚úÖ –ë–æ—Ç {school_id} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö")

        return {"status": "stopped", "school_id": school_id}

    async def restart_bot(self, config: dict):
        """
        –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ (–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç + –∑–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞–Ω–æ–≤–æ).
        """
        school_id = str(config["school_id"])
        logging.info(f"üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¥–ª—è {school_id}...")

        # 1. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–æ—Ç
        stop_result = await self.stop_bot(school_id)
        logging.info(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {stop_result['status']}")

        # 2. –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        await asyncio.sleep(0.5)

        # 3. –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–Ω–æ–≤–æ, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–æ—Ç –≤–∫–ª—é—á–µ–Ω
        if config.get("is_enabled"):
            logging.info(f"   ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¥–ª—è {school_id}...")
            start_result = await self.start_bot(config)
            logging.info(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—É—Å–∫–∞: {start_result['status']}")
            return start_result
        else:
            logging.info(
                f"   ‚è∏Ô∏è –ë–æ—Ç {school_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –Ω–µ –≤–∫–ª—é—á–µ–Ω (is_enabled=False)")
            return {"status": "stopped_disabled", "school_id": school_id}

    async def stop_all_bots(self):
        """
        –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ—Ö –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤ –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ FastAPI.
        """
        if not self.running_bots:
            logging.info("‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
            return

        logging.info(
            f"üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤ ({len(self.running_bots)})...")

        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É
        school_ids = list(self.running_bots.keys())
        tasks = [self.stop_bot(school_id) for school_id in school_ids]

        results = await asyncio.gather(*tasks, return_exceptions=True)

        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for school_id, result in zip(school_ids, results):
            if isinstance(result, Exception):
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞ {school_id}: {result}")
            else:
                logging.info(f"‚úÖ –ë–æ—Ç {school_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {result}")

        logging.info("‚úÖ –í—Å–µ –±–æ—Ç—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
